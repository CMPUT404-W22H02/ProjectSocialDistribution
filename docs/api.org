* Project Social Distribution API Documentation
** Description

This file specifies the expected payload fields for endpoints, as well as the return structure.

As of the Project Part 1 release, authentication for remote requests has not been implemented, but
future releases will expect HTTP Basic Auth, for which the (username, password) will be listed here.

For future releases, endpoints marked as *local* will only be accepted with the site's local token authorization.
*Remote* methods will be accessible via HTTP Basic Auth.

*** Single Author

Endpoint: http://socialdisto.herokuapp.com/authors/authors/{AUTHOR_ID}

Methods:
- GET [local, remote]: retrieve AUTHOR_ID's profile
- POST [local]: update AUTHOR_ID's profile.

GET http://socialdisto.herokuapp.com/authors/445c0898-6458-458c-8fca-68a31a3a465d/
#+BEGIN_SRC json
{
    # type cannot be edited with POST
    "type": "author",
    # id is returned fully qualified to the server
    # id cannot be edited with POST
    "id": "http://socialdisto.herokuapp.com/authors/445c0898-6458-458c-8fca-68a31a3a465d/",
    # url cannot be edited with POST
    "url": "http://socialdisto.herokuapp.com/authors/445c0898-6458-458c-8fca-68a31a3a465d/",
    # host cannot be edited with POST
    "host": "socialdisto.herokuapp.com",
    "display_name": "John Doe",
    "github": "https://github.com/johndoe"
}
#+END_SRC

POST payload structure will include fields from the author model which should be updated. Content is partially
updated, so fields not included in the POST content will be preserved on update.

*** Authors on Server

Endpoint: http://socialdisto.herokuapp.com/authors/

Methods:
- GET [local, remote]: retrieve all author profiles on the server, can be paginated with *page* and *size* query parameters.

Unpaginated example: http://socialdisto.herokuapp.com/authors/authors/
#+BEGIN_SRC json
{
    # No pagination template returned for unpaginated requests
    "type": "authors",
    "items": [
        {
            "type": "author",
            "id": "http://socialdisto.herokuapp.com/authors/445c0898-6458-458c-8fca-68a31a3a465d/",
            "url": "http://socialdisto.herokuapp.com/authors/445c0898-6458-458c-8fca-68a31a3a465d/",
            "host": "socialdisto.herokuapp.com",
            "display_name": "John Doe",
            "github": "https://github.com/johndoe"
        },
        {
            "type": "author",
            "id": "http://socialdisto.herokuapp.com/authors/da3c414d-7727-422e-91b9-c492b66f2386/",
            "url": "http://socialdisto.herokuapp.com/authors/da3c414d-7727-422e-91b9-c492b66f2386/",
            "host": "socialdisto.herokuapp.com",
            "display_name": "Jane Doe",
            "github": "https://github.com/janedoe"
        }
    ]
}
#+END_SRC

Paginated example: http://socialdisto.herokuapp.com/authors/?page=1&size=1
#+BEGIN_SRC json
{
    # Pagination fields include page count, the next/previous page url, and the pagination results
    "count": 2,
    "next": "http://socialdisto.herokuapp.com/authors/?page=2&size=1",
    "previous": null,
    "results": {
        "type": "authors",
        "items": [
            {
                "type": "author",
                "id": "http://socialdisto.herokuapp.com/authors/445c0898-6458-458c-8fca-68a31a3a465d/",
                "url": "http://socialdisto.herokuapp.com/authors/445c0898-6458-458c-8fca-68a31a3a465d/",
                "host": "socialdisto.herokuapp.com",
                "display_name": "John Doe",
                "github": "https://github.com/johndoe"
            }
        ]
    }
}
#+END_SRC
